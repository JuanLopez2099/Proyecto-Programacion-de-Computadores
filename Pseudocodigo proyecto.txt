Pseudocodigo proyecto

importar datetime como datetime

Definir funcion para calcular edad(fecha_nacimiento)
    Convertir fecha_nacimiento de cadena a formato fecha y guardar en fecha_nac
    Obtener la fecha actual y guardar en fecha_actual
    Restar fecha_actual entre fecha_nacimiento y guardar en edad
    retornar edad

Definir lista de empleados
Agregar diccionario a la lista para cada empleado
Cada diccionario debe contener 14 claves especificos
nombre como cadena
numero de identificacion como entero
fecha de nacimiento como cadena
edad como entero
sexo como cadena
numero telefonico como cadena
cargo como cadena
fecha de ingreso como cadena
tiene hijos como cadena
tipo de contrato como cadena
RH como cadena
estado civil como cadena
discapacidad como cadena
poblacion vulnerable como cadena


Definir lista de tablero_kanban
Agregar diccionario a la lista para cada empleado
Cada diccionario debe contener 6 claves específicas:
nombre como cadena
numero de identificacion como entero
numero_telefonico como entero
cargo como cadena
tarea_actual como cadena
estado como cadena



Definir funcion imprimir_tablas(lista)

    Definir diccionario anchos como vacio

    Definir lista campos con valores ["nombre", "numero_identificacion", "fecha_nacimiento", "edad", "sexo", "numero_telefonico", "cargo", "fecha_ingreso", "tiene_hijos", "tipo_contrato", "RH", "estado_civil", "discapacidad", "poblacion_vulnerable"]

    Para cada campo dentro de campos
        ancho = longitud(campo)
        Para cada empleado dentro de lista
            valor = longitud(convertir a cadena empleado[campo])
            Si valor > ancho Entonces
                ancho = valor
   
        anchos[campo] = ancho
    

    resultado = "" # Inicializar cadena vacía para construir la tabla

    # Construir fila de encabezados
    Para cada campo dentro de campos
        resultado += alinear a la izquierda(campo, anchos[campo]) + " "
    
    resultado += salto de linea

    # Construir filas de datos
    Para cada empleado dentro de lista
        Para cada campo dentro de campos
            resultado += alinear a la izquierda(convertir a cadena empleado[campo], anchos[campo]) + " "
        
        resultado += salto de linea
    

    Retornar resultado

Definir funcion imprimir_tablas_kanban(lista)

    Definir diccionario anchos como vacio

    Definir lista campos con valores ["nombre", "numero_identificacion", "numero_telefonico", "cargo", "tarea_actual", "estado"]

    Para cada campo dentro de campos
        ancho = longitud(campo)
        Para cada empleado dentro de lista
            valor = longitud(convertir a cadena empleado[campo])
            Si valor > ancho Entonces
                ancho = valor
   
        anchos[campo] = ancho
    

    resultado = "" # Inicializar cadena vacía para construir la tabla

    # Construir fila de encabezados
    Para cada campo dentro de campos
        resultado += alinear a la izquierda(campo, anchos[campo]) + " "
    
    resultado += salto de linea

    # Construir filas de datos
    Para cada empleado dentro de lista
        Para cada campo dentro de campos
            resultado += alinear a la izquierda(convertir a cadena empleado[campo], anchos[campo]) + " "
        
        resultado += salto de linea
    

    Retornar resultado

Definir función mostrar_tablero_kanban()
Si tablero_kanban no está vacía Entonces
    Retornar imprimir_kanban_tablas(tablero_kanban)  # Llama a la función que imprime la lista en formato de tabla
Sino
    Retornar "No hay empleados dentro del tablero kanban"

Definir función mostrar_empleados()
Si lista_empleados no está vacía Entonces
    Imprimir imprimir_tablas(lista_empleados)  # Llama a la función que imprime la lista en formato de tabla
Sino
    Imprimir "No hay empleados"

Definir funcion para buscar empleados con parametro de entrada(numero de identifiacion)
        por cada empleado dentro de la lista de empleados
            Si el numero de indentificacion se encuentra en la clave numero_identificacion
                  retorna el diccionario del empleado buscado
        Si no
           Retorna que el empleado no existe

Definir función asignar_tarea(numero_de_id)
Si numero_de_id no contiene solo dígitos Entonces
    Retornar "El numero de id solo debe contener numeros"
Sino
    Convertir numero_de_id a entero

Para cada empleado dentro de tablero_kanban
    Si numero_de_id = empleado[numero_identificacion] Entonces
        Imprimir "Empleado encontrado exitosamente:"
        Imprimir "Nombre: ", empleado[nombre]
        Imprimir "Numero de identificacion: ", empleado[numero_identificacion]
        Imprimir "Tarea actual: ", empleado[tarea_actual]
        
        Solicitar nueva_tarea al usuario
        empleado[tarea_actual] = nueva_tarea
        empleado[estado] = "ToDo"
        
        Retornar "Cambio exitoso"

Retornar "No existe el empleado"

Definir función eliminar_tarea(numero_de_id)
Si numero_de_id contiene caracteres que no son dígitos Entonces
    Retornar "El numero de id solo debe contener numeros"
Sino
    Convertir numero_de_id a número entero
FinSi

Para cada empleado en tablero_kanban Hacer
    Si numero_de_id es igual a empleado["numero_identificacion"] Entonces
        Imprimir "Empleado encontrado exitosamente:"
        Imprimir "Nombre:", empleado["nombre"]
        Imprimir "Numero de identificacion:", empleado["numero_identificacion"]
        Imprimir "Tarea actual:", empleado["tarea_actual"]
        
        Imprimir "Seguro que desea eliminar la tarea actual:"
        Imprimir "1. Si"
        Imprimir "2. No"
        
        Leer eliminar_tarea desde el usuario
        
        Segun eliminar_tarea Hacer
            Caso 1:
                Asignar "Tarea sin asignar" a empleado["tarea_actual"]
                Asignar "Tarea sin asignar" a empleado["estado"]
                Retornar "Tarea eliminada exitosamente"
            Caso 2:
                Retornar "Saliendo..."
            De otro modo:
                Retornar "Ingrese una opcion valida"

Retornar "No existe el empleado"


Definir lista coincidencias como vacía

Para cada empleado en tablero_kanban Hacer
    Si empleado["estado"] es igual a "ToDo" Entonces
        Agregar empleado a coincidencias
    FinSi
FinPara

Retornar imprimir_kanban_tablas(coincidencias)



Definir funcion registrar_empleado con parametros(nombre, numero_identificacion, fecha_nacimiento, edad, sexo, numero_telefonico, cargo, fecha_ingreso, tiene_hijos, tipo_contrato, RH, estado_civil, discapacidad, poblacion_vulnerable)
    

    Si nombre está vacío 
        O numero_identificacion está vacío o no es número
        O fecha_nacimiento está vacío
        O edad está vacía o no es número
        O numero_telefonico está vacío o no es número
        O cargo está vacío
        O fecha_ingreso está vacío
             Retornar "Las opciones deben ser válidas"

    Convertir numero_identificacion, edad y numero_telefonico a enteros

    Si numero_identificacion <= 0 O edad <= 0 O numero_telefonico <= 0 Entonces
        Retornar "Las opciones deben ser válidas"
    Si el conteo de "/" en fecha_nacimiento < 2 O > 2
        Retornar  La fecha de nacimiento debe estar separado por /
    Si el conteo de "/" en fecha_ingreso < 2 O > 2
        Retornar la fehca de ingreso debe estar separada por /
     sexo es igual a la clave digitada en opciones_sexo_empleado
     tiene_hijos es igual a la clave digitada en opciones_tiene_hijos
     tipo_contrato es igual a la clave digitada en opciones_tipo_contrato
     RH es igual an la clave digitada en opciones_RH
     estado_civil es igual a la clave digitada en opciones_estado_civil


    Crear nuevo_empleado como diccionario con todos los datos validados

    Por cada empleado en lista_empleados
        Si la clave nombre en nuevo_empleado  es igual a la clave nombre en empleado
           O nuevo_empleado.numero_identificacion es igual a empleado.numero_identificacion
           O nuevo_empleado.numero_telefonico es igual a empleado.numero_telefonico
               Retornar "No puede haber empleados con la misma informacion nombre/id/numero telefonico"

    Agregar nuevo_empleado a lista_empleados
    Imprimir "El empleado se ha registrado con éxito!"
    Retornar nuevo_empleado

Definir funcion para eliminar empleado



Definir funcion modificar_empleado(numero_identificacion)

    Para cada empleado dentro de lista_empleados
        Si numero_identificacion = empleado[numero_identificacion] Entonces

            Mientras Verdadero
                Imprimir "Escoja el dato que desea modificar:
                        1. Nombre
                        2. Numero de identificacion
                        3. Fecha de nacimiento
                        4. Cambiar sexo
                        5. Numero telefonico
                        6. Cargo
                        7. Fecha de ingreso
                        8. Tiene hijos
                        9. Tipo de contrato
                        10. RH
                        11. Estado civil
                        12. Discapacidad
                        13. Poblacion vulnerable
                        0. Guardar y salir"
                
                Solicitar opcion al usuario y guardar en opcion

                Segun opcion Hacer
                    Caso 1: 
                        Solicitar nuevo nombre
                        Si el nombre contiene solo letras Entonces
                            empleado[nombre] = nuevo nombre
                        Sino
                            Imprimir "El nombre debe contener solo letras y no debe estar vacio"
                        

                    Caso 2:
                        Guardar empleado_actual = empleado
                        Solicitar nuevo numero de identificacion
                        Inicializar banderas numero_isdigit, numero_mayor_0, numero_no_repetido en False
                        Si numero solo contiene digitos Entonces
                            numero_isdigit = Verdadero
                            Convertir numero a entero
                        Sino
                            Imprimir "El numero de id solo debe contener numeros y no debe tener espacios"
                        
                        Si numero_isdigit y numero > 0 Entonces
                            numero_mayor_0 = Verdadero
                        Sino
                            Imprimir "El numero no puede ser menor o igual a 0"
                        
                        Para cada emp en lista_empleados Hacer
                            Si emp != empleado_actual y numero = emp[numero_identificacion] Entonces
                                Imprimir "El numero de identificacion ya existe"
                                repetido = Verdadero
                                Romper
                            
                        
                        Si no repetido Entonces
                            numero_no_repetido = Verdadero
                        
                        Si numero_isdigit y numero_mayor_0 y numero_no_repetido Entonces
                            empleado[numero_identificacion] = numero
                        

                    Caso 3:
                        Solicitar nueva fecha de nacimiento
                        Si formato incorrecto Entonces
                            Imprimir "La fecha de nacimiento debe estar separada por /"
                        Sino
                            empleado[fecha_nacimiento] = nueva fecha
                            empleado[edad] = calcular_edad(nueva fecha)
                        

                    Caso 4:
                        Imprimir menu sexo
                        Solicitar opcion sexo
                        Segun sexo Hacer
                            Caso 1: empleado[sexo] = "Hombre"
                            Caso 2: empleado[sexo] = "Mujer"
                            Caso 3: empleado[sexo] = "Otro"
                            Caso _: Imprimir "Escoja una opcion valida"
                        

                    Caso 5:
                        Guardar empleado_actual = empleado
                        Solicitar nuevo numero telefonico
                        Inicializar banderas telefono_solo_numeros, telefono_mayor_0, telefono_no_repetido en False
                        Validar que solo tenga digitos y > 0
                        Comprobar que no se repita en otros empleados
                        Si todas las validaciones son verdaderas Entonces
                            empleado[numero_telefonico] = numero
                        

                    Caso 6:
                        Solicitar nuevo cargo
                        Si solo contiene letras Entonces
                            empleado[cargo] = cargo
                        Sino
                            Imprimir "El cargo digitado debe contener solo letras"
                        

                    Caso 7:
                        Solicitar nueva fecha de ingreso
                        Si formato incorrecto Entonces
                            Imprimir "La fecha de ingreso debe estar separada por /"
                        Sino
                            empleado[fecha_ingreso] = nueva fecha
                        

                    Caso 8:
                        Imprimir menu tiene hijos
                        Solicitar opcion tiene_hijos
                        Segun opcion Hacer
                            Caso 1: empleado[tiene_hijos] = "Si"
                            Caso 2: empleado[tiene_hijos] = "No"
                            Caso _: Imprimir "Escoja una opcion valida"
                        

                    Caso 9:
                        Imprimir menu tipo de contrato
                        Solicitar opcion tipo_contrato
                        Segun opcion Hacer
                            Caso 1: empleado[tipo_contrato] = "Definido"
                            Caso 2: empleado[tipo_contrato] = "Indefinido"
                            Caso 3: empleado[tipo_contrato] = "Obra labor"
                            Caso 4: empleado[tipo_contrato] = "Aprendizaje"
                            Caso _: Imprimir "Escoja una opcion valida"
                        

                    Caso 10:
                        Imprimir menu RH
                        Solicitar opcion RH
                        Segun opcion Hacer
                            Caso 1: empleado[RH] = "A+"
                            Caso 2: empleado[RH] = "A-"
                            Caso 3: empleado[RH] = "B+"
                            Caso 4: empleado[RH] = "B-"
                            Caso 5: empleado[RH] = "AB+"
                            Caso 6: empleado[RH] = "AB-"
                            Caso 7: empleado[RH] = "O+"
                            Caso 8: empleado[RH] = "O-"
                            Caso _: Imprimir "Digite una opcion valida"
                        

                    Caso 11:
                        Imprimir menu estado civil
                        Solicitar opcion estado_civil
                        Segun opcion Hacer
                            Caso 1: empleado[estado_civil] = "Soltero"
                            Caso 2: empleado[estado_civil] = "Casado"
                            Caso 3: empleado[estado_civil] = "Union libre"
                            Caso 4: empleado[estado_civil] = "Divorciado"
                            Caso 5: empleado[estado_civil] = "Viudo"
                            Caso _: Imprimir "Digite una opcion valida"
                        

                    Caso 12:
                        Imprimir menu discapacidad
                        Solicitar opcion discapacidad
                        Segun opcion Hacer
                            Caso 1: empleado[discapacidad] = "Si"
                            Caso 2: empleado[discapacidad] = "No"
                            Caso _: Imprimir "Digite una opcion valida"
                        

                    Caso 13:
                        Imprimir menu poblacion vulnerable
                        Solicitar opcion poblacion_vulnerable
                        Segun opcion Hacer
                            Caso 1: empleado[poblacion_vulnerable] = "Si"
                            Caso 2: empleado[poblacion_vulnerable] = "No"
                            Caso _: Imprimir "Digite una opcion valida"
                        

                    Caso 0:
                        Imprimir "Los cambios se han realizado con exito"
                        Retornar empleado

                    Caso _:
                        Imprimir "Digite una opcion valida"

    Retornar "El empleado buscado no existe"


Definir funcion filtrar_edad_especifica(edad)
    
    Si edad contiene solo digitos Entonces
        Convertir edad a entero
        Retornar "La edad no puede contener letras"

    Si edad <= 0 Entonces
        Retornar "La edad debe ser mayor a 0"

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Si edad = empleado[edad] Entonces
            Agregar empleado a coincidencias

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No existen empleados con la edad ingresada"

Definir funcion filtrar_edad_rango(edad_min, edad_max)

    Si edad_min y edad_max contienen solo digitos Entonces
        Convertir edad_min a entero
        Convertir edad_max a entero
    Sino
        Retornar "Las edades ingresadas no pueden contener letras"

    Si edad_min <= 0 o edad_max <= 0 Entonces
        Retornar "Las edades ingresadas deben ser mayores a 0"

    Si edad_max <= edad_min Entonces
        Retornar "La edad maxima no puede ser menor a la edad minima"

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Si empleado[edad] esta entre edad_min y edad_max Entonces
            Agregar empleado a coincidencias

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No existen empleados en los rangos de edad ingresados"


Definir funcion filtrar_fecha_ingreso_especifica(fecha_ingreso)

    Si el numero de "/" en fecha_ingreso es menor a 2 o mayor a 2 Entonces
        Retornar "La fecha ingresada debe seguir el formato indicado"

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Si fecha_ingreso = empleado[fecha_ingreso] Entonces
            Agregar empleado a coincidencias

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No existen empleados con la fecha de ingreso ingresada"


Definir funcion filtrar_fecha_ingreso_dia(dia)

    Si dia no contiene solo digitos Entonces
        Retornar "Los parametros ingresados deben contener unicamente numeros"
    Sino
        Convertir dia a entero
    FinSi

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Convertir empleado[fecha_ingreso] de string a formato datetime y guardar en fecha_ingreso_lista
        Si dia = fecha_ingreso_lista.dia Entonces
            Agregar empleado a coincidencias

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No existen empleados ingresados en el dia indicado"

Definir funcion filtrar_fecha_ingreso_mes(mes)

    Si mes no contiene solo digitos Entonces
        Retornar "Los parametros ingresados deben contener unicamente numeros"
    Sino
        Convertir mes a entero
    FinSi

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Convertir empleado[fecha_ingreso] de string a formato datetime y guardar en fecha_ingreso_lista
        Si mes = fecha_ingreso_lista.mes Entonces
            Agregar empleado a coincidencias

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No existen empleados ingresados en el mes indicado"

Definir funcion filtrar_fecha_ingreso_año(año)

    Si año no contiene solo digitos Entonces
        Retornar "Los parametros ingresados deben contener unicamente numeros"
    Sino
        Convertir año a entero
    FinSi

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Convertir empleado[fecha_ingreso] de string a formato datetime y guardar en fecha_ingreso_lista
        Si año = fecha_ingreso_lista.año Entonces
            Agregar empleado a coincidencias

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No existen empleados ingresados en el año indicado"

Definir funcion filtrar_sexo(sexo_opcion)

    Definir diccionario opciones_sexo con valores {1: "hombre", 2: "mujer", 3: "otro"}

    sexo = opciones_sexo[sexo_opcion]

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Si sexo = empleado[sexo] Entonces
            Agregar empleado a coincidencias

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No hay empleados del sexo indicado"

Definir funcion filtrar_hijos(opcion_hijos)

    Definir diccionario opciones_hijos con valores {1: "Si", 2: "No"}

    hijos = opciones_hijos[opcion_hijos]

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Si hijos = empleado[tiene_hijos] Entonces
            Agregar empleado a coincidencias

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No hay empleados que cumplan la condición de hijos"

Definir diccionario opciones_RH con valores {1: "A+", 2: "A-", 3: "B+", 4: "B-", 5: "AB+", 6: "AB-", 7: "O+", 8: "O-"}

RH = opciones_RH[opcion_RH]

Definir lista coincidencias como vacia

Para cada empleado dentro de lista_empleados
    Si RH = empleado[RH] Entonces
        Agregar empleado a coincidencias


Si coincidencias no esta vacia Entonces
    Retornar coincidencias
Sino
    Retornar "No existen empleados con el tipo de sangre indicado"

Definir funcion filtrar_estado_civil(opcion_estado_civil)

    Definir diccionario opciones_estado_civil con valores {1: "Soltero", 2: "Casado", 3: "Union libre", 4: "Divorciado", 5: "Viudo"}

    estado_civil = opciones_estado_civil[opcion_estado_civil]

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Si estado_civil = empleado[estado_civil] Entonces
            Agregar empleado a coincidencias
   

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No existen empleados con el estado civil indicado"

Definir funcion filtrar_poblacion_vulnerable(opcion_poblacion_vulnerable)

    Definir diccionario opciones_poblacion_vulnerable con valores {1: "Si", 2: "No"}

    poblacion_vulnerable = opciones_poblacion_vulnerable[opcion_poblacion_vulnerable]

    Definir lista coincidencias como vacia

    Para cada empleado dentro de lista_empleados
        Si poblacion_vulnerable = empleado[poblacion_vulnerable] Entonces
            Agregar empleado a coincidencias
  

    Si coincidencias no esta vacia Entonces
        Retornar coincidencias
    Sino
        Retornar "No existen empleados en la poblacion vulnerable indicada"  

Definir funcion de menu
    imprimir opcion 1 lista de empleados
             opcion 2 buscar empleado
             opcion 3 registrar empleado
             opcion 0 salir